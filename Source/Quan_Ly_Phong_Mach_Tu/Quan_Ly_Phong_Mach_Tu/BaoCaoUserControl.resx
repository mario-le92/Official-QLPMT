<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnRF.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>